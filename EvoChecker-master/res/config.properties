#Note: Automatic transformation of QoS requirements to constraints and minimisation/maximisation objectives
#      is currently under development. For the time being, the user should define the constraints & objectives 
#	   in methods evochecker.EvoChecker.initialise() & evochecker.genetic.jmetal.GeneticProblem.paralleleEvaluate()

#Step 1:Set the probabilistic model template and the probabilistic temporal logic formulae files of the problem
#FX
#	MODEL_TEMPLATE_FILE = models/FX/fxSmall.pm
#	PROPERTIES_FILE = models/FX/fxSmall.pctl
#DPM
	MODEL_TEMPLATE_FILE = models/DPM/dpm.pm
	PROPERTIES_FILE = models/DPM/dpm.csl
#Zeroconf
	#MODEL_TEMPLATE_FILE = models/Zeroconf/zeroconf.pm
	#PROPERTIES_FILE = models/Zeroconf/zeroconf.pctl
#COPE
#	MODEL_TEMPLATE_FILE = models/COPE/cope.pm
#	PROPERTIES_FILE = models/COPE/cope.pctl
	


#Step2 : Set the algorithm (MOGA or Random) to run
	#ALGORITHM = RANDOM
#	ALGORITHM = NSGAII
	#ALGORITHM = SPEA2
	#ALGORITHM = MOCELL
	ALGORITHM = OMOPSO

#Step 3: Set the population for the MOGAs
	POPULATION_SIZE = 10


#Step 4: Set the maximum number of evaluations
	MAX_EVALUATIONS = 100


#Step 5: Set the number of processors (for parallel execution)
	PROCESSORS = 1


#Step 6: Set the JVM location
#OSx
#	JVM =  /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java
	INIT_PORT_NUM = 8860
#linux cs
	#JVM =  /usr/lib/jvm/java-7-oracle/jre/bin/java
	JVM = /usr/lib/jvm/jdk1.8.0_241/bin/java
#linux yarcc
	#JVM =  /opt/yarcc/infrastructure/java/1.8.0_05/1/default/bin/java


#Step 7: Run 
	#A) Within a Java IDE (e.g. Eclipse) run evochecker.EvoChecker
	#B) From terminal:  



#The following are for EvoStudy, a feature (based on JMetal) that allows to run multiple algorithms on the same 
#problem variant for a pre-specified number of runs
#EvoStudy: Set where the results should be saved
	RUNS = 1
	OUTPUTDIR = /home/Downloads/EvoChecker-master/EvoChecker-master/data 
	EXPERIMENT = EvoStudy43
	